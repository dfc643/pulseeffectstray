#!/usr/bin/env python3

ACTIVE = """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAA
A4ElEQVRYhe3WO04CUQCGUWJp2ILJLMHKenoaVuAa7LVgB0hDTYsU2tj72I
CdDQnsQGopDgWEXCEoE++dm+h85WSS/yTzbLWamn4Zphiii3YOQNgSr7jBB
U7qBuy2wASXuQDb/gXgBdd4xmcOwF1w7BQdDPBeF2D8zTlndQAmyUYaQHYA
CvQxCwbvUSYHWH9kPvZfLXvFB+D8iOGkgKcKgMfY40WFcXiLDSh/nPzaPDd
gFBtQ9RJcRQVsEFVuwiIF4NjHsBd9PEB0rf/tDjVKNh4gCtxivhld4AFl8v
GmP98Kq3ow54OS3dAAAAAASUVORK5CYII="""


INACTIVE = """iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0A
AAB3klEQVRYhe3Vu2sUURTH8TNGLXTL4KMQUuQPiCBa2CxWQS3SRv8FsbG0
EdTKRhuJhSApFSRgpRY+IpjCNILaCApilUAURIkYPxYzG8Zxdh7ZDTb7g9O
cex7fuXPuvREjjZQTNq1FznvcxAw6bWsnxaDNheSvpSqAfMVfEbEUEQ8j4l
FEvEqS5HdV7b4ALVSV9DUiHkfEg4iY/x8AeW32ygPsKASdjIgPEbEeEcsRc
aYIua3Cin/1EkfyQ1Swnp7jIp7hZ0md+gHHakkibOA29pUAXMN33M359uAU
buBdG4CrfQB6WsMF7CpAHMj8/XbpUFOAMczVQMAbTFc0rLQqgJ6dyJrU6T4
mtwMgsBPns22v0g9cQWfYAD0bxy3pIFbpE2aRDBugZ4fxogYCFrPYoQNE9n
Wz+FwDsSEd5vFBAaYwj70Ff0f639drQNZwTjpPWwJ4mhV6jeMl65NYqIEgP
VHdtgATJYWeZLtSjJ3G2wYgcxhrCtCtKHRPevvl43dLb8O6Y3t5GADwTfoO
FPMOSt+Nfsd2dZBfUKZlHC0BOSZ9SYta2coQNtH+kvwEZ7EkPTEfcboNwFT
D5pdKcge7iHK+GXypaH6nxQe1B8j8E7iebaEMaAHd/tWa1R5ppD+Go50hrM
tcDgAAAABJRU5ErkJggg=="""

import re
import os
import io
import sys
import signal
import base64
import subprocess

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GdkPixbuf, GLib, Gio

class Icon ():
    
    icon = False
    image_active = False
    image_inactive = False
    has_bypass = False
    
    def __init__ (self):
        stream_active = Gio.MemoryInputStream.new_from_bytes(GLib.Bytes(base64.b64decode(ACTIVE)))
        stream_inactive = Gio.MemoryInputStream.new_from_bytes(GLib.Bytes(base64.b64decode(INACTIVE)))
        self.image_active = GdkPixbuf.Pixbuf.new_from_stream(stream_active)
        self.image_inactive = GdkPixbuf.Pixbuf.new_from_stream(stream_inactive)
        
        self.icon = Gtk.StatusIcon()
        self.icon.set_visible(True)
        self.icon.connect("popup-menu", self.rightclick)
        self.icon.connect("activate", self.leftclick)
        
        self.hidetotray = False
        if len(sys.argv) > 1 and sys.argv[1] == '-h':
            self.set_icon(False)
            self.hidetotray = True
        else:
            out = subprocess.getoutput('pulseeffects -b 3')
            if re.match(r"[0-1]", out):
                self.has_bypass = True
                self.set_icon(self.get_bypass())
            else:
                self.set_icon(False)
    
    def quit (self, icon):
        os.system("pulseeffects -q")
        
    def rightclick (self, icon, button, time):
        self.menu = Gtk.Menu()
        
        presets = self.presetlist()
        outs = presets[0]
        ins = presets[1]
        
        self.add_presets(outs, "Output Presets:", self.menu)
        
        sep = Gtk.SeparatorMenuItem()
        self.menu.append(sep);
        
        self.add_presets(ins, "Input Presets:", self.menu)
        
        sep = Gtk.SeparatorMenuItem()
        self.menu.append(sep);
        
        '''
        qpe = Gtk.MenuItem()
        qpe.set_label("停止音效服务")
        qpe.connect("activate", self.quit)
        self.menu.append(qpe)
        '''
        
        qicon = Gtk.MenuItem()
        qicon.set_label("关闭托盘图标")
        qicon.connect("activate", kill)
        self.menu.append(qicon)

        self.menu.show_all()
        self.menu.popup(None, None, None, self.icon, 0, time)
        
    def leftclick (self, icon):
        if self.hidetotray:
            out = subprocess.getoutput("wmctrl -l|awk '{$3=\"\"; $2=\"\"; $1=\"\"; print $0}'|grep \"^   PulseEffects\"")
            if out.strip() == "PulseEffects":
                os.system('pulseeffects -h')
            else:
                os.system('pulseeffects')
        else:
            if self.has_bypass:
                self.toggle_bypass()
            else:
                self.rightclick(icon, 0, Gtk.get_current_event_time())
    
    def add_presets(self, presets, title, menu):
        if not len(presets):
            return
        titem = Gtk.MenuItem()
        titem.set_label(title)
        titem.set_sensitive(False)
        menu.append(titem)
        for p in presets:
            pitem = Gtk.MenuItem()
            pitem.set_label(p)
            pitem.connect("activate", self.load_preset)
            menu.append(pitem)
    
    def load_preset(self, widget):
        os.system('pulseeffects -l "%s"' % widget.get_label())
        
    def presetlist (self):
        out = subprocess.getoutput('pulseeffects -p 2>&1| grep -i "presets:"')
        pre = []
        for line in out.splitlines():
            arr = []
            atoms = line[line.index(':')+1:].split(",")
            for a in atoms:
                a = a.strip()
                if a:
                    arr.append(a)
            pre.append(arr)
        return pre
        
    def set_icon (self, bypass):
        if bypass:
            self.icon.set_from_pixbuf(self.image_inactive)
        else:
            self.icon.set_from_pixbuf(self.image_active)
            
    def get_bypass (self):
        out = subprocess.getoutput('pulseeffects -b 3')
        return out == "1"
        
    def set_bypass (self, bypass):
        if bypass: s = "1"
        else: s = "2"
        os.system('pulseeffects -b %s' % s)
        self.set_icon(bypass)
        
    def toggle_bypass (self):
        bypass = not self.get_bypass()
        self.set_bypass(bypass)
        return bypass
        
        
def kill(obj1, obj2 = False):
    Gtk.main_quit()
    
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGINT, kill)
    icon = Icon()
    Gtk.main()
