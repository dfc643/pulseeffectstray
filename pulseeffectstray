#!/usr/bin/env python3

ACTIVE = b"""iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0A
AABVklEQVRYhe2WvUoDQRSFv/WPVCkkWNjYCAbtbOwsLewsfBKRtHZibac
PEF/Awk5TiIUggiiojSAqiIg2YgIei50Vi+zMZHbYQveD29295zBz752Fi
or/TuJKkORKWQNWgTbQAR6BF6D3I5Lky4x4mHRRBxZMAFwBh8AxcANcA6/
B1SW5YkP5vEnat9UfCnbmRx1YLsvABbANnANdIGueL9tHMXog4wFYN4KTw
JKJ2bIMZPSAO2DXxJgtOeYVJPQf625ZBoIIuYJRYJi0yT5xNJmLQU6gAbS
AM9LF8gxsAjNFDDgxy2ZK0pFl4UjSgaRav2Vlw+cEasAWsOjIC5ooHwNzp
I+NiwnPegMbmPbMGydtzugGfDklnYroBm7xG7UTfv0DRMN09p5jAu4lNfO
e7KIGsjHs5Ii/S1rJE49lAEkNSS1Jl5I+JD1J2pE0bxMvbKCi4s/zDaVoS
vlxNfZKAAAAAElFTkSuQmCC"""


INACTIVE = b"""iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr
0AAABrklEQVRYhe2WwUsUYRyGn01d9ySxSlehJIJuXbp462Q3DxIevOm1S
4SEB7v1B0QEdhaDDkFQsJCgHkSig8qWYB0DRQhJpKjIp8N+q6Ps7ny7zV5
sX/gYZubl+z3fN+/8ZqCjjv535dIMaprlHjAGLAArwA7wFfh9XCRXv0x3B
GSa+oCbYQBsAUvAKvAJ2Ab2W55dTRsPra9v6utG819okmcReANcjvT3Abe
zBOgHRoAy8ADIA+/CvTLwGNgAfgHV8Bw1WeO0zmx3Xp1Rv4ctLqvD6qT6R
O1Ve9RBdUp9oX7IEqA6rqilAHGkPlOLalcNb74dANUxru4EkD11Qs2d9bU
TAPWi+lT9E0DeqldjAZoNIUAPUAB6w/kdKsEbBjaBW+E4m/C0rsRKBtTpE
Lwf6oH6SJ0PK7+rdqv31cNwbT2rRzCoLtdsNScqqYWE/5X6MguAgvo8pbj
qYgIgOoQxGbhO5WOTpkuR8zUNMBTpKwJd7QCI1XvgZzsAPhPXz9dI/ANkp
sgQflGv1Qpglq/hSp3iB+poveJZASQb0UcrjWhXnVNvNCr+zwAddXTu9Rd
b+pn7LfCXkgAAAABJRU5ErkJggg=="""

import re
import os
import io
import sys
import signal
import base64
import subprocess
import time
import locale

from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

import gi
gi.require_version('Gio', '2.0')
from gi.repository import Gio


#__tray_icon__
class Icon ():
    
    icon = False
    image_active = False
    image_inactive = False
    has_bypass = False
    
    def __init__ (self):
        self.image_active = QBase64Icon(ACTIVE)
        self.image_inactive = QBase64Icon(INACTIVE)
        
        self.icon = QSystemTrayIcon()
        self.icon.setIcon(self.image_active)
        self.icon.setVisible(True)
        self.icon.setContextMenu(self.rightclick())
        self.icon.activated.connect(self.leftclick)
        
        self.hidetotray = False
        if len(sys.argv) > 1 and sys.argv[1] == '-h':
            self.set_icon(False)
            self.hidetotray = True
        else:
            out = subprocess.getoutput('pulseeffects -b 3 2>&1 | grep "^[0-9]$"')
            if re.match(r"[0-1]", out):
                self.has_bypass = True
                self.set_icon(self.get_bypass())
            else:
                self.set_icon(False)
    
    def closeEvent(self, event):
        """Ignore all ways of closing"""
        event.ignore()
        
        
    def openmixer (self, icon):
        os.system("pulseeffects &")
    
    
    def quit (self, icon):
        os.system("pulseeffects -q")
        Nofitication(i18n_quitmsg)
        
        
    def rightclick (self):
        menu = QMenu()
        presets = self.presetlist()
        outs = presets[0]
        ins = presets[1]
        
        self.add_presets(outs, i18n_playback, menu)
        menu.addSeparator()
        self.add_presets(ins, i18n_record, menu)
        menu.addSeparator()
        
        act_openui = menu.addAction(i18n_openmixer)
        act_openui.triggered.connect(self.openmixer)
        act_quit = menu.addAction(i18n_quit)
        act_quit.triggered.connect(self.quit)
        menu.addSeparator()
        
        act_quit = menu.addAction(i18n_kill)
        act_quit.triggered.connect(kill)
        return menu

        
    def leftclick (self, event):
        if event == QSystemTrayIcon.ActivationReason.Trigger \
            and self.has_bypass:
            self.toggle_bypass()
    
    
    def add_presets(self, presets, title, menu):
        if not len(presets):
            return
        lbl_preset = menu.addAction(title)
        lbl_preset.setEnabled(False)
        for p in presets:
            act_preset = menu.addAction(p)
            act_preset.triggered.connect(lambda checked, name=p: self.load_preset(name))
    
    
    def load_preset(self, name):
        CheckBackend()
        os.system('pulseeffects -l "%s"' % name)
        Nofitication(i18n_switched % name)
        
        
    def presetlist (self):
        out = subprocess.getoutput('pulseeffects -p 2>&1| grep -i "presets:"')
        pre = []
        for line in out.splitlines():
            arr = []
            atoms = line[line.index(':')+1:].split(",")
            for a in atoms:
                a = a.strip()
                if a:
                    arr.append(a)
            pre.append(arr)
        return pre
        

    def set_icon (self, bypass):
        if bypass:
            self.icon.setIcon(self.image_inactive)
        else:
            self.icon.setIcon(self.image_active)
            
            
    def get_bypass (self):
        out = subprocess.getoutput('pulseeffects -b 3 2>&1 | grep "^[0-9]$"')
        return out == "1"
        
        
    def set_bypass (self, bypass):
        if bypass: s = "1"
        else: s = "2"
        os.system('pulseeffects -b %s' % s)
        self.set_icon(bypass)
        
        
    def toggle_bypass (self):
        bypass = not self.get_bypass()
        self.set_bypass(bypass)
        return bypass
        

#__check_pulseeffects_backend__
def CheckBackend():
    ps = subprocess.getoutput("ps -ef")
    backend = ps.find("pulseeffects --gapplication-service")
    if backend == -1:
        print("Backend not in Running");
        os.system("pulseeffects --gapplication-service &")


#__qt_base64_icon__
def QBase64Icon(base64):
    pixmap = QtGui.QPixmap()
    pixmap.loadFromData(QtCore.QByteArray.fromBase64(base64))
    icon = QtGui.QIcon(pixmap)
    return QIcon(icon)


#__gtk_desktop_notification__
def Nofitication(message):
    Application = Gio.Application.new("com.xretia.petray", Gio.ApplicationFlags.FLAGS_NONE)
    Application.register()
    Notification = Gio.Notification.new(i18n_title)
    Notification.set_body(message)
    Icon = Gio.ThemedIcon.new("dialog-information")
    Notification.set_icon(Icon)
    Application.send_notification(None, Notification)
    return True

#__quit_tray__
def kill(obj1, obj2 = False):
    app.exit();


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_IGN)
    signal.signal(signal.SIGINT, kill)
    
    language = locale.getdefaultlocale()[0]
    print(language)
    if language == "zh_CN":
        i18n_title      = "音效控制"
        i18n_playback   = "播放音效"
        i18n_record     = "录制音效"
        i18n_openmixer  = "打开音效控制台 ..."
        i18n_quit       = "停止音效服务"
        i18n_kill       = "关闭托盘图标"
        i18n_switched   = "音效已切换至：%s"
        i18n_quitmsg    = "音效服务已停止，切换预设可再次开启"
    elif language == "zh_TW":
        i18n_title      = "音效控制"
        i18n_playback   = "播放音效"
        i18n_record     = "錄製音效"
        i18n_openmixer  = "打開音效控制台 ..."
        i18n_quit       = "停止音效服務"
        i18n_kill       = "關閉託盤圖標"
        i18n_switched   = "音效已切換至：%s" 
        i18n_quitmsg    = "音效服務已停止，切換預設可再次開啟 "
    elif language == "ja_JP":
        i18n_title      = "オーディオエフェクト"
        i18n_playback   = "再生効果"
        i18n_record     = "録音効果"
        i18n_openmixer  = "エフェクトコンソールを開く ..."
        i18n_quit       = "効果サービスを停止"
        i18n_kill       = "システムトレイを終了"
        i18n_switch     = "効果「%s」に切り替えられました"
        i18n_quitmsg    = "エフェクトサービスが停止しました。プリセットを切り替えるには、再びオンにする"
    else:
        i18n_title      = "PulseEffects Tray"
        i18n_playback   = "Playback"
        i18n_record     = "Recording"
        i18n_openmixer  = "Open Mixer ..."
        i18n_quit       = "Stop PulseEffects Service"
        i18n_kill       = "Exit PulseEffects Tray"
        i18n_switched   = "Preset switched to: %s"
        i18n_quitmsg    = "The sound effect service has stopped. To switching preset can be turned on again"
    
    app = QApplication(sys.argv)
    icon = Icon()
    CheckBackend()
    sys.exit(app.exec_())
    
